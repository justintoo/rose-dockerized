#!/usr/bin/perl
$Interpreter ||= "/usr/bin/perl";
#-------------------------------------------------------------------------------
#
#   Copyright 1985-99,2000-18 James Frederick Reus
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
#-------------------------------------------------------------------------------

# MyUniqueFileId: 05bfd522-45a2-4dfa-ca27-420e6c630546

$mkinstaller_ver_major = "2";
$mkinstaller_ver_minor = "0";
$mkinstaller_ver_build = "13";
$mkinstaller_ver_patch = "";
$mkinstaller_ver_name  = "2.0.13";
$mkinstaller_ver_time  = "15Oct2018 21:00:27z";
$mkinstaller_ver_id    = "@(#)mkinstaller 2.0.13 - 15Oct2018 21:00:27z";

@defaultCopyrightOwners
  = ( "Copyright 1985-99,2000-18 James Frederick Reus\n"
    );

@defaultCopyrightStatement
  = ( "Licensed under the Apache License, Version 2.0 (the \"License\");\n"
    , "you may not use this file except in compliance with the License.\n"
    , "You may obtain a copy of the License at\n"
    , "\n"
    , "    http://www.apache.org/licenses/LICENSE-2.0\n"
    , "\n"
    , "Unless required by applicable law or agreed to in writing, software\n"
    , "distributed under the License is distributed on an \"AS IS\" BASIS,\n"
    , "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
    , "See the License for the specific language governing permissions and\n"
    , "limitations under the License.\n"
    );

# MyUniqueFileId: 08a2697c-7a76-48bf-fe94-1d68e212b462
$rawCommand   = $0;
$theCommand   = $rawCommand;
$theCommand   =~ tr/\\/\//;
$foundInDir   = "";

$debugging    = 0;
if ( exists $ENV{"DEBUG_tbg_post_install"}) {
   $debugging = 1;
   print "tbg-post-install: DEBUG_tbg_post_install exists, debugging enabled\n" if $debugging;
}

{
   #----------------------------------------------------------------------------
   #
   #  Initialization...
   #
   #  Note this script is almost identical to the tbg-pre-install script. Also
   #  much of this isn't really needed, it is demo'in a lot of potentially
   #  useful stuff.
   #
   #----------------------------------------------------------------------------

   print "tbg-post-install: initialization...\n" if $debugging;
   my $dir_include    = "";
   my $dir_lib        = "";
   my $dir_prefix     = "";
   my $here           = getWorkingDirectory();
   my $inputPathname  = "";
   my %lookFor        = ();
   my $outputPathname = "";
   my $prefix_include = "";
   my $prefix_lib     = "";
   my $prefix_lib64   = "";
   my $qdir_include   = "";
   my $qdir_lib       = "";
   my $qdir_prefix    = "";
   my $verbosityLevel = 0;
   print "tbg-post-install: ...done\n" if $debugging;

   #----------------------------------------------------------------------------
   #
   #  Process command line...
   #
   #  First take stuff from OPTS_tbg_post_install
   #  environment variable and put it at the
   #  start of the command line...
   #
   #----------------------------------------------------------------------------

   if ( exists $ENV{'OPTS_tbg_post_install'} ) {
      print "tbg-post-install: deal with OPTS_tbg_post_install...\n" if $debugging;
      my $tmp = $ENV{'OPTS_tbg_post_install'};
      if ($tmp ne "") {
         my @tmp = split /\s/, $tmp;
         my $i;
         for ($i=$#tmp; 0<=$i; $i-=1) {
            unshift @ARGV, $tmp[$i];
         }
      }
      print "tbg-post-install: ...done\n" if $debugging;
   }

   #---------------------------------------
   #
   #  Then step through the command line...
   #
   #  Again much of this isn't really needed,
   #  just a lot of potentially useful stuff.
   #
   #---------------------------------------

   print "tbg-post-install: process command line...\n" if $debugging;
   {
      my $i;
      for ($i=0; $i<=$#ARGV; $i+=1) {
         my $opt = $ARGV[$i];
         print "tbg-post-install: ...found \"$opt\"\n" if $debugging;
         $_      = $opt;
         parseArgs: {
                       #---------------------------------------
                       #
                       #  Non-standard options...
                       #
                       #---------------------------------------

                       /^--prefix-include=?$/

                          && do {
                             print STDERR "tbg-post-install: missing or zero-length argument to $opt option\n";
                             exit 1;
                          };

                       /^--prefix-include=(.+)$/

                          && do {
                             if ($prefix_include ne "") {
                                print STDERR "tbg-post-install: unexpected $opt\n";
                                exit 1;
                             }
                             $prefix_include        = $1;
                             if ( ! exists $lookFor{'include'}) {
                                $lookFor{'include'} = $prefix_include."/include";
                             }
                             print "tbg-post-install:    headers under \"$prefix_include\"\n" if $debugging;
                             last parseArgs;
                          };

                       /^--prefix-lib=?$/

                          && do {
                             print STDERR "tbg-post-install: missing or zero-length argument to $opt option\n";
                             exit 1;
                          };

                       /^--prefix-lib=(.+)$/

                          && do {
                             if ($prefix_lib ne "") {
                                print STDERR "tbg-post-install: unexpected $opt\n";
                                exit 1;
                             }
                             if ($prefix_lib64 ne "") {
                                print STDERR "tbg-post-install: unexpected $opt\n";
                                exit 1;
                             }
                             $prefix_lib            = $1;
                             if ( ! exists $lookFor{'lib'}) {
                                $lookFor{'lib'}     = $prefix_lib."/lib";
                             }
                             print "tbg-post-install:    libraries under \"$prefix_lib\"\n" if $debugging;
                             last parseArgs;
                          };

                       /^--prefix-lib64=?$/

                          && do {
                             print STDERR "tbg-post-install: missing or zero-length argument to $opt option\n";
                             exit 1;
                          };

                       /^--prefix-lib64=(.+)$/

                          && do {
                             if ($prefix_lib ne "") {
                                print STDERR "tbg-post-install: unexpected $opt\n";
                                exit 1;
                             }
                             if ($prefix_lib64 ne "") {
                                print STDERR "tbg-post-install: unexpected $opt\n";
                                exit 1;
                             }
                             $prefix_lib64          = $1;
                             if ( ! exists $lookFor{'lib64'}) {
                                $lookFor{'lib64'}   = $prefix_lib64."/lib64";
                             }
                             print "tbg-post-install:    libraries under \"$prefix_lib64\"\n" if $debugging;
                             last parseArgs;
                          };

                       /^--prefix-([a-zA-Z0-9_]+)=(.+)$/

                          && do {
                             my $name               = $1;
                             my $pathname           = $2;
                             if ( ! exists $lookFor{$name}) {
                                $lookFor{$name}     = $pathname."/".$name;
                             }
                             print "tbg-post-install:    ignoring \"$ignored\"\n" if $debugging;
                             last parseArgs;
                          };

                       /^--prefix=?$/

                          && do {
                             print STDERR "tbg-post-install: missing or zero-length argument to $opt option\n";
                             exit 1;
                          };

                       /^--prefix=(.+)$/

                          && do {
                             if (($prefix_include ne "") || ($prefix_lib ne "") || ($prefix_lib64 ne "")) {
                                print STDERR "tbg-post-install: unexpected $opt\n";
                                exit 1;
                             }
                             my $collective         = $1;
                             $prefix_include        = $collective."/include";
                             $prefix_lib            = $collective."/lib";
                             $prefix_lib64          = $collective."/lib64";
                             if ( ! exists $lookFor{'include'}) {
                                $lookFor{'include'} = $prefix_include;
                             }
                             if ( ! exists $lookFor{'lib'}) {
                                $lookFor{'lib'}     = $prefix_lib;
                             }
                             if ( ! exists $lookFor{'lib64'}) {
                                $lookFor{'lib64'}   = $prefix_lib64;
                             }
                             print "tbg-post-install:    headers under \"$prefix_include\"\n" if $debugging;
                             print "tbg-post-install:    libraries under \"$prefix_lib\"\n" if $debugging;
                             print "tbg-post-install:                 or \"$prefix_lib64\"\n" if $debugging;
                             last parseArgs;
                          };

                       #---------------------------------------
                       #
                       #  "Semi-standard" options...
                       #
                       #---------------------------------------

                       /^((-d)|(--debug))$/

                          && do {
                             if ( ! $debugging) {
                                $debugging = 1;
                                print "tbg-post-install: $opt supplied, debugging enabled\n" if $debugging;
                             }
                             last parseArgs;
                          };

                       /^-v$/

                          && do {
                             $verbosityLevel += 1;
                             print "tbg-post-install:    ...level is now $verbosityLevel\n" if $debugging;
                             last parseArgs;
                          };

                       /^-v0$/

                          && do {
                             $verbosityLevel  = 0;
                             print "tbg-post-install:    ...level is now $verbosityLevel\n" if $debugging;
                             last parseArgs;
                          };

                       /^-v([1-9][0-9]*)$/

                          && do {
                             $verbosityLevel += $1;
                             print "tbg-post-install:    ...level is now $verbosityLevel\n" if $debugging;
                             last parseArgs;
                          };

                       /^--verbose$/

                          && do {
                             $verbosityLevel += 1;
                             print "tbg-post-install:    ...level is now $verbosityLevel\n" if $debugging;
                             last parseArgs;
                          };

                       /^--verbose0$/

                          && do {
                             $verbosityLevel  = 0;
                             print "tbg-post-install:    ...level is now $verbosityLevel\n" if $debugging;
                             last parseArgs;
                          };

                       /^--verbose([1-9][0-9]*)$/

                          && do {
                             $verbosityLevel += $1;
                             print "tbg-post-install:    ...level is now $verbosityLevel\n" if $debugging;
                             last parseArgs;
                          };

                       #---------------------------------------
                       #
                       #  Unknown options...
                       #
                       #---------------------------------------

                       /^--(.*)$/

                          && do {
                             print STDERR "tbg-post-install: unknown option \"".$opt."\"\n";
                             my $optName = $1;
                             if (length($optName) == 1) {
                                print STDERR "tbg-post-install: ...did you mean -".$optName." or \"./".$opt."\"\n";
                             }
                             elsif (1 <= length($opt)) {
                                print STDERR "tbg-post-install: ...did you mean \"./".$opt."\"\n";
                             }
                             exit 1;
                          };

                       /^-(.*)$/

                          && do {
                             print STDERR "tbg-post-install: unknown option \"".$opt."\"\n";
                             my $optName = $1;
                             if (2 <= length($optName)) {
                                print STDERR "tbg-post-install: ...did you mean --".$optName." or \"./".$opt."\"\n";
                             }
                             elsif (1 <= length($opt)) {
                                print STDERR "tbg-post-install: ...did you mean \"./".$opt."\"\n";
                             }
                             exit 1;
                          };

                       #---------------------------------------
                       #
                       #  Parameters...
                       #
                       #---------------------------------------

                       /^.+$/

                          && do {
                             print STDERR "tbg-post-install: unexpected parameter \"".$opt."\"\n";
                             exit 1;
                          };

                       /^$/

                          && do {
                             print STDERR "tbg-post-install: zero-length parameter\n";
                             exit 1;
                          };
                    }
      }
   }
   print "tbg-post-install: ...done\n" if $debugging;

   #----------------------------------------------------------------------------
   #
   #  Consider what was given...
   #
   #     A prefix for the include directory and for the lib (or lib64) directory
   #     must be supplied. Now strip any enclosing quotes. Establish the names
   #     of both the include and lib (or lib64) directories.
   #
   #     Again much of this isn't really needed, just a lot of potentially
   #     useful stuff.
   #
   #----------------------------------------------------------------------------

   my $ok = 1;
   if ($prefix_include eq "") {
      print STDERR "tbg-post-install: error -- prefix for headers was not specified\n";
      $ok = 0;
   }
   if ($prefix_include eq "") {
      print STDERR "tbg-post-install: error -- prefix for libraries was not specified\n";
      $ok = 0;
   }
   if ( ! $ok) {
      exit 1;
   }
   if ($prefix_include =~ /^"(.*)"$/) {
      $prefix_include = $1;
      print "tbg-post-install: stripped double-quotes from include prefix\n" if $debugging;
   }
   elsif ($prefix_include =~ /^'(.*)'$/) {
      $prefix_include = $1;
      print "tbg-post-install: stripped single-quotes from include prefix\n" if $debugging;
   }
   if (($prefix_lib ne "") && ($prefix_lib64 ne "")) {
      print STDERR "tbg-post-install: error -- prefix for lib and lib64 were both specified\n";
   }
   if ($prefix_lib =~ /^"(.*)"$/) {
      $prefix_lib     = $1;
      print "tbg-post-install: stripped double-quotes from lib prefix\n" if $debugging;
   }
   elsif ($prefix_lib =~ /^'(.*)'$/) {
      $prefix_lib     = $1;
      print "tbg-post-install: stripped single-quotes from lib prefix\n" if $debugging;
   }
   if ($prefix_lib64 =~ /^"(.*)"$/) {
      $prefix_lib64   = $1;
      print "tbg-post-install: stripped double-quotes from lib64 prefix\n" if $debugging;
   }
   elsif ($prefix_lib64 =~ /^'(.*)'$/) {
      $prefix_lib64   = $1;
      print "tbg-post-install: stripped single-quotes from lib64 prefix\n" if $debugging;
   }
   $ok    = 0;
   if ($prefix_include eq $prefix_lib) {
      $ok = 1;
   }
   elsif ($prefix_include eq $prefix_lib64) {
      $ok = 1;
   }
   if ( ! $ok) {
      print STDERR "tbg-post-install: warning -- the prefix for headers(=\"$prefix_include\")\n";
      if ($prefix_lib ne "") {
         print STDERR "tbg-post-install: ...is not the same as prefix for libraries(=\"$prefix_lib\")\n";
      }
      if ($prefix_lib64 ne "") {
         print STDERR "tbg-post-install: ...is not the same as prefix for libraries(=\"$prefix_lib64\")\n";
      }
   }
   if ($prefix_lib ne "") {
      $prefix         = $prefix_lib;
   }
   elsif ($prefix_lib64 ne "") {
      $prefix         = $prefix_lib64;
   }

   $dir_include       = $prefix_include."/include";
   if ($dir_include =~ /\s/) {
      $qdir_include   = "\"".$dir_include."\"";
   }
   else {
      $qdir_include   = $dir_include;
   }
   if ($prefix_lib ne "") {
      $dir_lib        = $prefix_lib."/lib";
      if ($dir_lib =~ /\s/) {
         $qdir_lib    = "\"".$dir_lib."\"";
      }
      else {
         $qdir_lib    = $dir_lib;
      }
   }
   elsif ($prefix_lib64 ne "") {
      $dir_lib        = $prefix_lib64."/lib64";
      if ($dir_lib =~ /\s/) {
         $qdir_lib    = "\"".$dir_lib."\"";
      }
      else {
         $qdir_lib    = $dir_lib;
      }
   }
   $dir_prefix        = $prefix;
   if ($dir_prefix =~ /\s/) {
      $qdir_prefix    = "\"".$dir_prefix."\"";
   }
   else {
      $qdir_prefix    = $dir_prefix;
   }

   #----------------------------------------------------------------------------
   #
   #  Note that tbg-post-install shares version info with mkinstaller
   #
   #----------------------------------------------------------------------------

   print STDERR "tbg-post-install:\n" if (1 <= $verbosityLevel);
   print STDERR "tbg-post-install: $mkinstaller_ver_name rev. $mkinstaller_ver_time\n" if (1 <= $verbosityLevel);

   #----------------------------------------------------------------------------
   #
   #  Check if installation directories exist
   #
   #  Note that the various installation directories really MUST exist after
   #  the installation process finishes.
   #
   #----------------------------------------------------------------------------

   {
      my $first   = 1;
      my @errors  = ( );
      my $Nerrors = 0;
      my $bn;
      foreach $bn (sort keys %lookFor) {
         my $pathname = $lookFor{$bn};
         if ($first) {
            print STDERR "tbg-post-install:\n" if (1 <= $verbosityLevel);
            print STDERR "tbg-post-install: checking for the installation directories:\n" if (1 <= $verbosityLevel);
            print STDERR "tbg-post-install: ...\"$pathname\"" if (1 <= $verbosityLevel);
            $first = 0;
         }
         else {
            print STDERR "tbg-post-install:    \"$pathname\"" if (1 <= $verbosityLevel);
         }
         if ( -l $pathname) {
            if ( -d $pathname) {
               print STDERR " exists as a symbolic-link to a directory\n" if (1 <= $verbosityLevel);
            }
            elsif ( -f $pathname) {
               print STDERR " exists as a symbolic-link to a file\n" if (1 <= $verbosityLevel);
               if ( ! exists $errors{$pathname}) {
                  $errors{$pathname} = $bn;
               }
               $Nerrors += 1;
            }
            elsif ( -e $pathname) {
               print STDERR " exists as a symbolic-link to something other than a directory or a file\n" if (1 <= $verbosityLevel);
               if ( ! exists $errors{$pathname}) {
                  $errors{$pathname} = $bn;
               }
               $Nerrors += 1;
            }
            else {
               print STDERR " exists as a broken symbolic-link\n" if (1 <= $verbosityLevel);
               if ( ! exists $errors{$pathname}) {
                  $errors{$pathname} = $bn;
               }
               $Nerrors += 1;
            }
         }
         elsif ( -d $pathname) {
            print STDERR " exists as a directory\n" if (1 <= $verbosityLevel);
         }
         elsif ( -f $pathname) {
            print STDERR " exists as a file\n" if (1 <= $verbosityLevel);
            if ( ! exists $errors{$pathname}) {
               $errors{$pathname} = $bn;
            }
            $Nerrors += 1;
         }
         elsif ( -e $pathname) {
            print STDERR " exists as something other than a directory, file, or symbolic-link\n" if (1 <= $verbosityLevel);
            if ( ! exists $errors{$pathname}) {
               $errors{$pathname} = $bn;
            }
            $Nerrors += 1;
         }
         else {
            print STDERR " doesn't exist\n" if (1 <= $verbosityLevel);
            if ( ! exists $errors{$pathname}) {
               $errors{$pathname} = $bn;
            }
            $Nerrors += 1;
         }
      }
      if (1 <= $Nerrors) {
         print STDERR "tbg-post-install: error -- not all of the directories appear to have been properly installed\n";
         my $first = 1;
         my $pathname;
         foreach $pathname (sort keys %errors) {
            my $bn = $errors{$pathname};
            if ($first) {
               print STDERR "tbg-post-install: ...\"$pathname\"\n";
               $first = 0;
            }
            else {
               print STDERR "tbg-post-install:    \"$pathname\"\n";
            }
         }
         #---------------------------------------
         #
         #  Should probably quit here
         #
         #---------------------------------------
      }
   }

   #----------------------------------------------------------------------------
   #
   #  Show command-line stuff if verbose...
   #
   #----------------------------------------------------------------------------

   if (1 <= $verbosityLevel) {
      print STDERR "tbg-post-install:\n";
      print STDERR "tbg-post-install: given:\n";
      my $i;
      for ($i=0; $i<=$#ARGV; $i+=1) {
         my $opt = $ARGV[$i];
         if ($i == 0) {
            print STDERR "tbg-post-install: ...";
         }
         else {
            print STDERR "tbg-post-install:    ";
         }
         print STDERR $i.": [".$opt."]\n";
      }

      #---------------------------------------
      #
      #  Where headers and/or libraries
      #  ended-up...
      #
      #---------------------------------------

      if ($qdir_include ne "") {
         if ($qdir_lib ne "") {
            print STDERR "tbg-post-install: \n";
            print STDERR "tbg-post-install: Note: headers in $qdir_include\n";
            print STDERR "tbg-post-install:     libraries in $qdir_lib\n";
         }
         else {
            print STDERR "tbg-post-install: \n";
            print STDERR "tbg-post-install: Note: headers in $qdir_include\n";
         }
      }
      else {
         if ($qdir_lib ne "") {
            print STDERR "tbg-post-install: \n";
            print STDERR "tbg-post-install: Note: libraries in $qdir_lib\n";
         }
      }
   }

   print "tbg-post-install: ...all done\n" if $debugging;
   exit 0;
}
# MyUniqueFileId: c58e95af-7811-46b9-ba94-c63e6b2ed7ee
#-------------------------------------------------------------------------------
#
#  Decide where to place tempfiles.
#
#  0) Try the pathname in in the environment variable that
#     was passed as the single parameter.
#  1) Try the pathname in TMPDIR
#  2) Try the pathname in TMP
#  3) Try the pathname in TEMP
#  4) Try ~/tmp (tmp under home directory)
#  5) Try c:<usrProf>\AppData\Local\temp directory
#  6) Try /tmp
#  7) Try /var/tmp
#  8) Try c:\Temp
#  9) Try c:\Windows\Temp
#  10) Try .
#
#  Note that 5, 8, and 9 are only applicable on Windows-like hosts.
#
#  This function uses: findHomeDirectory(),
#                      getOSclass()
#
#  see: totebag/src/perl-lib/findTempDir.psub
#
#-------------------------------------------------------------------------------

sub findTempDir {
   my $envVarName = shift;
   my $tmpdir     = "";

   #---------------------------------------
   #
   #  First try the given environment variable...
   #
   if ($tmpdir eq "") {
      if ($envVarName ne "") {
         if ( exists $ENV{$envVarName}) {
            my $trydir = $ENV{$envVarName};
            if ( -d $trydir) {
               if ( -w $trydir) {
                  $tmpdir = $trydir;
               }
            }
         }
      }
   }

   #---------------------------------------
   #
   #  ...then try TMPDIR environment variable...
   #
   if ($tmpdir eq "") {
      if ( exists $ENV{'TMPDIR'}) {
         my $trydir = $ENV{'TMPDIR'};
         if ( -d $trydir) {
            if ( -w $trydir) {
               $tmpdir = $trydir;
            }
         }
      }
   }

   #---------------------------------------
   #
   #  ...then try TMP environment variable...
   #
   if ($tmpdir eq "") {
      if ( exists $ENV{'TMP'}) {
         my $trydir = $ENV{'TMP'};
         if ( -d $trydir) {
            if ( -w $trydir) {
               $tmpdir = $trydir;
            }
         }
      }
   }

   #---------------------------------------
   #
   #  ...then try TEMP environment variable...
   #
   if ($tmpdir eq "") {
      if ( exists $ENV{'TEMP'}) {
         my $trydir = $ENV{'TEMP'};
         if ( -d $trydir) {
            if ( -w $trydir) {
               $tmpdir = $trydir;
            }
         }
      }
   }

   #---------------------------------------
   #
   #  ...then try tmp subdirectory of the
   #     user's home directory...
   #
   if ($tmpdir eq "") {
      #---------------------------------------
      #
      #  Find the user's home directory
      #
      my $theHomeDir = findHomeDirectory();
      if ($theHomeDir ne "") {
         if ( -d $theHomeDir) {
            my $trydir = $theHomeDir."/tmp";
            if ( -d $trydir) {
               if ( -w $trydir) {
                  $tmpdir = $trydir;
               }
            }
         }
      }
   }

   if ($tmpdir eq "") {
      if (getOSclass() eq "Windows-like") {

         #---------------------------------
         #
         #  ...then try "c:<usrProf>\AppData\Local\Temp"
         #     directory...
         #
         if ( exists $ENV{'USERPROFILE'} ) {
            my $usrProf   = $ENV{'USERPROFILE'};
            if ($usrProf ne "") {
               my $trydir = "$usrProf\\AppData\\Local\\Temp";
               if ( -d $trydir) {
                  if ( -w $trydir) {
                     $tmpdir = $trydir;
                  }
               }
            }
         }
      }
   }

   #---------------------------------------
   #
   #  ...then try "/tmp" directory...
   #
   if ($tmpdir eq "") {
      my $trydir = "/tmp";
      if ( -d $trydir) {
         if ( -w $trydir) {
            $tmpdir = $trydir;
         }
      }
   }

   if ($tmpdir eq "") {
      if (getOSclass() eq "Windows-like") {

         #---------------------------------
         #
         #  ...then try "c:\Temp" directory...
         #
         if ($tmpdir eq "") {
            my $trydir = "c:\\Temp";
            if ( -d $trydir) {
               if ( -w $trydir) {
                  $tmpdir = $trydir;
               }
            }
         }

         #---------------------------------
         #
         #  ...then try "c:\Windows\Temp" directory...
         #
         if ($tmpdir eq "") {
            my $trydir = "c:\\Windows\\Temp";
            if ( -d $trydir) {
               if ( -w $trydir) {
                  $tmpdir = $trydir;
               }
            }
         }
      }
   }

   #---------------------------------------
   #
   #  ...finally try "." directory...
   #
   if ($tmpdir eq "") {
      my $trydir = ".";
      if ( -w $trydir) {
         $tmpdir = $trydir;
      }
   }

   return $tmpdir;
}

# MyUniqueFileId: 14888b4a-e281-4663-9f7c-63017caea3ca
#-------------------------------------------------------------------------------
#
#  Get the OS class.
#
#  This function is used to determine the OS class of of the host system.
#
#  Returns: Any of:
#
#              "UNIX-like"
#              "Windows-like"
#              "unknown" (failure)
#
#  see: totebag/src/perl-lib/getOSclass.psub
#
#-------------------------------------------------------------------------------

sub getOSclass {
   my $result;
   #---------------------------------------
   #
   #  First try to use a (fast) direct
   #  method...
   #
   my $theOSname = $^O;
   if ($theOSname =~ /^linux$/) {
      $result = "UNIX-like";
   }
   elsif ($theOSname =~ /^MSWin32$/) {
      $result = "Windows-like";
   }
   elsif ($theOSname =~ /^darwin$/) {
      $result = "UNIX-like";
   }
   elsif ($theOSname =~ /^freebsd$/) {
      $result = "UNIX-like";
   }
   elsif ($theOSname =~ /^solaris$/) {
      $result = "UNIX-like";
   }
   elsif ($theOSname =~ /^aix$/) {
      $result = "UNIX-like";
   }
   elsif ($theOSname =~ /^dec_osf$/) {
      $result = "UNIX-like";
   }
   elsif ($theOSname =~ /^hpux$/) {
      $result = "UNIX-like";
   }
   elsif ($theOSname =~ /^irix$/) {
      $result = "UNIX-like";
   }
   else {
      #---------------------------------------
      #
      #  The hard way...
      #
      #  If it isn't directly known, try to
      #  figure it out the hard way. UNIX-like
      #  hosts use colons (:) as the separator
      #  in PATH, but Windows-like hosts use
      #  semicolons (;).
      #
      #  Note: Must check for semicolons first
      #        (Windows) as Windows may have
      #        colons too as drive letter
      #        separators.
      #
      if ( defined $ENV{'PATH'} ) {
         my $tmpPath = $ENV{'PATH'};
         if ($tmpPath =~ /;/) {
            $result = "Windows-like";
         }
         elsif ($tmpPath =~ /:/) {
            $result = "UNIX-like";
         }
         else {
            $result = "unknown";
         }
      }
      else {
         $result = "unknown";
      }
   }
   return $result;
}

# MyUniqueFileId: c01f73fc-3153-477a-c68b-cbb74bc9526f
#-------------------------------------------------------------------------------
#
#  Get the current working directory.
#
#  This function is used to determine the current working directory. Note
#  that this sort of thing is generally supplied by a standard module but
#  Perl installations have been sometimes found to lack this (rarely but...).
#  Note that this does this operation the hard way.
#
#  This function uses: findHomeDirectory(),
#                      findTempDir(),
#                      getOSclass(),
#
#  see: totebag/src/perl-lib/getWorkingDirectory.psub
#
#-------------------------------------------------------------------------------

sub getWorkingDirectory {
   my $callerIs = shift;
   my $exitCode;
   my $gives;
   my $tmpdir   = findTempDir("");
   my $osClass  = getOSclass();
   if ($osClass eq "UNIX-like") {
      my $tmpFile = "$tmpdir/pwd-$$.tmp";
      $gives      = `pwd 2>$tmpFile`;
      $exitCode   = $? + 0;
      chomp $gives;
      unlink $tmpFile if -f $tmpFile;
   }
   elsif ($osClass eq "Windows-like") {
      my $tmpFile = "$tmpdir\\pwd-$$.tmp";
      $gives      = `cd 2>$tmpFile`;
      $exitCode   = $? + 0;
      chomp $gives;
      unlink $tmpFile if -f $tmpFile;
   }
   else {
      $gives    = "";
      $exitCode = 1;
   }
   if ($exitCode != 0) {
      print STDERR "$callerIscan't determine current working directory\n";
      $gives = "";
   }
   return $gives;
}

